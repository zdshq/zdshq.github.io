[{"id":"6fc7f970a8bdd0db8488c948c20eb0ef","title":"how to edit makefile","content":"\n\n\n\n\n\n提示\n众所周知  makefile是大型项目中不可缺少的一部分，往往在网上学习大型项目时，都需要去阅读makefile，自己在写项目时，有时候也需要自己去编写自己项目的makefile，从而能够帮助大家在项目开发中不会在编译这一块花费太多的时间。本人也是最近在学习一生一芯PA，在PA2中需要自己去手动改一下makefile，所以出了一下的教程，本文也会从实践出发，不会长篇大论，一起去写一个简单到复杂然后从实践去理解makefile编写的语法！\n\n一个简单的makefile# Makefile\nall: main\n\nmain: main.c\n\tgcc -o main main.c\n通过终端我们可以输入以下命令去编译生成main：\nmake all\n上述makefile是编译一个C语言源文件main.c，相信大家对于这种简单的makefile不需要去说就能猜到他是怎么编译的吧。首先我们我们通过make带入的参数all去找到这一行\n# Makefile\nall: main\n然而，这行代码是什么意思呢？这就是makefile的规则target: prerequisites  command……target就是你要得到的目标，prerequisites是你的依赖，command是你的命令，它们之间的关系是：prerequisites -&gt; command -&gt; target\n所以当make找到 all: main 这一行之后，首先会去查看依赖是否存在，如果不存在，就会去在已有的规则里面去寻找target为main的规则，从而生成all所需要的依赖然后我们显而易见的就找到了这一行：\n# Makefile\nmain: main.c\n\tgcc -o main main.c\n我们发现这一个规则刚好就是为了生成main而编写的，而他的依赖存在吗？很明显，它存在，然后就运行gcc -o main main.c这一条命令，生成main。当 main 这个目标文件生成后，all 的依赖就已经满足了，因此 make all 这个命令就执行完成了这就是一个最初始的makefile文件！\n加入变量和多个文件编译的makefile(进阶版)# Makefile\nCC = gcc\n\nCFLAGS = -Wall -g\n\nTarget = main\n\nSRCS = $(wildcard ./*.c)\n\nOBJS = $(SRCS:.c=.o)\n\nall: $(Target)\n\n$(Target): $(OBJS)\n\t$(CC) $(CFLAGS) -o $@ $^\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -c $&lt; -o $@ \n首先就是变量的格式 \nVariable = 值\n调用的格式是$(Variable)然后就再来说说这两行代码\nSRCS = $(wildcard ./*.c)\n\nOBJS = $(SRCS:.c=.o)\n首先是SRCS &#x3D; $(wildcard .&#x2F;*.c)，这个变量的命名是调用了一个叫做wildcard的函数，暂时不需要管，我们会在下面提到，现在我们只需要知道，他会通过通配符去匹配在当前目录下的所有的.c文件并且返回给SRCS。然后就是OBJS &#x3D; $(SRCS:.c&#x3D;.o)，这个变量的主要作用就是及时的\n","slug":"hello-world","date":"2023-07-16T03:00:00.000Z","categories_index":"Makefile","tags_index":"makefile","author_index":"zds"},{"id":"a6b82868af4785482b869dc5d958966b","title":"Article Title","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world（复件）","date":"2020-08-15T10:49:36.000Z","categories_index":"技术2","tags_index":"技术1","author_index":"zds"},{"id":"a6b82868af4785482b869dc5d958966b","title":"Article Title","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world（另一个复件）","date":"2020-08-15T10:49:36.000Z","categories_index":"技术2","tags_index":"技术1","author_index":"zds"}]